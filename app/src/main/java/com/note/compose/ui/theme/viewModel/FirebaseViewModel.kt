package com.note.compose.ui.theme.viewModel

import android.util.Log
import androidx.lifecycle.ViewModel
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase
import com.note.compose.ui.theme.datamodel.Note
import com.note.compose.ui.theme.datamodel.Tag
import com.note.compose.ui.theme.datamodel.User
class FirebaseViewModel: ViewModel() {
    private val database = FirebaseDatabase.getInstance().reference

    // Add a new user
    fun addUser(user: User, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val userId = database.child("users").push().key ?: return
        val userWithId = user.copy(id = userId)
        database.child("users").child(userId).setValue(userWithId)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { onFailure(it) }
    }
    // Add a tag for a user
    fun addTag(userId: String, tag: Tag, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val tagId = database.child("users").child(userId).child("tags").push().key
        if (tagId != null) {
            val tagWithId = tag.copy(id = tagId) // Add the autogenerated id to the Tag object
            database.child("users").child(userId).child("tags").child(tagId).setValue(tagWithId)
                .addOnSuccessListener { onSuccess() }
                .addOnFailureListener { onFailure(it) }
        } else {
            onFailure(Exception("Failed to generate tag ID"))
        }
    }

    fun updateTagInFirebase(userId: String, tagId: String, tagName: String, onResult: () -> Unit) {
        val updatedTag = Tag(
            id = tagId,
            tagName = tagName,
        )

        database.child("users").child(userId).child("tags").child(tagId)
            .setValue(updatedTag)
            .addOnSuccessListener {
                onResult() // Call onResult to notify about success
            }
            .addOnFailureListener {
                // Handle failure (e.g., show error message)
            }
    }
    //Get a tag for user
    fun getUserTags(userId: String, onResult: (List<Tag>) -> Unit) {
        database.child("users").child(userId).child("tags").get()
            .addOnSuccessListener { dataSnapshot ->
                val tags = mutableListOf<Tag>()

                for (child in dataSnapshot.children) {
                    val tag = child.getValue(Tag::class.java)
                    if (tag != null) {
                        // Assign the key as the id
                        tags.add(tag.copy(id = child.key ?: ""))
                    }
                }
                onResult(tags)
            }
            .addOnFailureListener {
                onResult(emptyList())
            }
    }

    fun getUserNotes(userId: String, onResult: (List<Note>) -> Unit) {
        // Accessing the "notes" child of the user
        database.child("users").child(userId).child("notes").get()
            .addOnSuccessListener { dataSnapshot ->
                val notes = mutableListOf<Note>()

                // Iterating through the children of "notes" to build the list of notes
                for (child in dataSnapshot.children) {
                    val note = child.getValue(Note::class.java)
                    if (note != null) {
                        notes.add(note)
                    }
                }

                // Passing the list of notes to the callback
                onResult(notes)
            }
            .addOnFailureListener {
                // Returning an empty list if the operation fails
                onResult(emptyList())
            }
    }


    // Add a note for a user
    fun addNote(userId: String, note: Note, onSuccess: () -> Unit, onFailure: (Exception) -> Unit) {
        val noteId = database.child("users").child(userId).child("notes").push().key

        if (noteId != null) {
            // Create a new note object with the generated ID
            val noteWithId = note.copy(id = noteId)

            // Save the note under the generated ID
            database.child("users").child(userId).child("notes").child(noteId).setValue(noteWithId)
                .addOnSuccessListener { onSuccess() }
                .addOnFailureListener { onFailure(it) }
        } else {
            onFailure(Exception("Failed to generate note ID"))
        }
    }
    fun updateNoteInFirebase(userId: String, noteId: String, title: String, description: String, tag: String, onResult: () -> Unit) {
        val updatedNote = Note(
            id = noteId,
            title = title,
            description = description,
            tag = tag
        )

        database.child("users").child(userId).child("notes").child(noteId)
            .setValue(updatedNote)
            .addOnSuccessListener {
                onResult() // Call onResult to notify about success
            }
            .addOnFailureListener {
                // Handle failure (e.g., show error message)
            }
    }

    fun deleteNote(userId: String, noteId: String, onResult: (Boolean) -> Unit) {
        // Access the note node in Firebase Realtime Database
        database.child("users").child(userId).child("notes").child(noteId)
            .removeValue()  // Remove the note by its ID
            .addOnSuccessListener {
                // If delete is successful, call the onResult callback with true
                onResult(true)
            }
            .addOnFailureListener {
                // If delete fails, call the onResult callback with false
                onResult(false)
            }
    }
    fun deleteTag(userId: String, tagId: String, onResult: (Boolean) -> Unit) {
        // Access the note node in Firebase Realtime Database
        database.child("users").child(userId).child("tags").child(tagId)
            .removeValue()  // Remove the note by its ID
            .addOnSuccessListener {
                // If delete is successful, call the onResult callback with true
                onResult(true)
            }
            .addOnFailureListener {
                // If delete fails, call the onResult callback with false
                onResult(false)
            }
    }

    fun login(email: String, password: String, onSuccess: (User) -> Unit, onFailure: (String) -> Unit) {
        database.child("users").get()
            .addOnSuccessListener { dataSnapshot ->
                var userFound: User? = null
                for (child in dataSnapshot.children) {
                    val user = child.getValue(User::class.java)
                    if (user != null && user.email == email && user.password == password) {
                        userFound = user
                        break
                    }
                }
                if (userFound != null) {
                    onSuccess(userFound)
                } else {
                    onFailure("Invalid email or password")
                }
            }
            .addOnFailureListener { exception ->
                onFailure(exception.message ?: "An error occurred")
            }
    }

    // Forgot Password
    fun forgotPassword(
        email: String,
        onEmailFound: () -> Unit,
        onFailure: (String) -> Unit
    ) {
        database.child("users").get()
            .addOnSuccessListener { dataSnapshot ->
                var emailExists = false
                for (child in dataSnapshot.children) {
                    val user = child.getValue(User::class.java)
                    if (user != null && user.email == email) {
                        emailExists = true
                        break
                    }
                }
                if (emailExists) {
                    onEmailFound()
                } else {
                    onFailure("Email not found")
                }
            }
            .addOnFailureListener { exception ->
                onFailure(exception.message ?: "An error occurred")
            }
    }

    fun sendPasswordResetEmail(
        email: String,
        onSuccess: () -> Unit,
        onFailure: (String?) -> Unit
    ) {
        FirebaseAuth.getInstance().sendPasswordResetEmail(email)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    Log.d("FirebaseAuth","Password reset email sent to $email")
                } else {
                    Log.d("FirebaseAuth","Failed to send email: ${task.exception?.message}")
                }
            }
    }

    // Update Password
    fun updatePassword(
        userId: String,
        newPassword: String,
        onSuccess: () -> Unit,
        onFailure: (String) -> Unit
    ) {
        database.child("users").child(userId).child("password").setValue(newPassword)
            .addOnSuccessListener { onSuccess() }
            .addOnFailureListener { exception ->
                onFailure(exception.message ?: "An error occurred")
            }
    }

}
